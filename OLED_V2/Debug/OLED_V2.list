
OLED_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001324  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  080014bc  080014bc  000114bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018d8  080018d8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080018d8  080018d8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018d8  080018d8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018d8  080018d8  000118d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018dc  080018dc  000118dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080018e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000041c  20000004  080018e4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  080018e4  00020420  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000470c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000cc9  00000000  00000000  00024740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000268  00000000  00000000  00025410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001e8  00000000  00000000  00025678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f635  00000000  00000000  00025860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000036f3  00000000  00000000  00034e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053e8a  00000000  00000000  00038588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008c412  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000008c4  00000000  00000000  0008c468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080014a4 	.word	0x080014a4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080014a4 	.word	0x080014a4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <Write_IIC_Command>:
extern void I2C_MasterReceiveData(I2C_TypeDef *I2Cx,uint8_t SlaveAddr,uint8_t *pRxbuffer, uint32_t Len);

/**********************************************
// IIC Write Command
**********************************************/
void Write_IIC_Command(unsigned char IIC_Command){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2];

	data[0] = 0x00;
 80009be:	2300      	movs	r3, #0
 80009c0:	733b      	strb	r3, [r7, #12]
	data[1] = IIC_Command;
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(I2C_OLED, IIC_SLAVE_ADDR, data, 2);
 80009c6:	f107 020c 	add.w	r2, r7, #12
 80009ca:	2302      	movs	r3, #2
 80009cc:	213c      	movs	r1, #60	; 0x3c
 80009ce:	4803      	ldr	r0, [pc, #12]	; (80009dc <Write_IIC_Command+0x28>)
 80009d0:	f000 fbea 	bl	80011a8 <I2C_MasterSendData>
	return;
 80009d4:	bf00      	nop
}
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40005400 	.word	0x40005400

080009e0 <Write_IIC_Data>:
/**********************************************
// IIC Write Data
**********************************************/
void Write_IIC_Data(unsigned char IIC_Data){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2];
	data[0] = 0x40;
 80009ea:	2340      	movs	r3, #64	; 0x40
 80009ec:	733b      	strb	r3, [r7, #12]
	data[1] = IIC_Data;
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(I2C_OLED, IIC_SLAVE_ADDR, data, 2);
 80009f2:	f107 020c 	add.w	r2, r7, #12
 80009f6:	2302      	movs	r3, #2
 80009f8:	213c      	movs	r1, #60	; 0x3c
 80009fa:	4803      	ldr	r0, [pc, #12]	; (8000a08 <Write_IIC_Data+0x28>)
 80009fc:	f000 fbd4 	bl	80011a8 <I2C_MasterSendData>
	return;
 8000a00:	bf00      	nop
}
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40005400 	.word	0x40005400

08000a0c <OLED_WR_Byte>:
                cmd:0-write command
								    1-write data
 * @retvalue   :None
********************************************************************/
void OLED_WR_Byte(unsigned dat,unsigned cmd)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
	if(cmd)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d005      	beq.n	8000a28 <OLED_WR_Byte+0x1c>
	{
		Write_IIC_Data(dat);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ffdd 	bl	80009e0 <Write_IIC_Data>
	}
	else {
	   Write_IIC_Command(dat);

	}
	return;
 8000a26:	e005      	b.n	8000a34 <OLED_WR_Byte+0x28>
	   Write_IIC_Command(dat);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ffc1 	bl	80009b4 <Write_IIC_Command>
	return;
 8000a32:	bf00      	nop
}
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <OLED_Set_Pixel>:
								      1-white
											0-black
 * @retvalue   :None
********************************************************************/
void OLED_Set_Pixel(unsigned char x, unsigned char y,unsigned char color)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
 8000a46:	460b      	mov	r3, r1
 8000a48:	71bb      	strb	r3, [r7, #6]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	717b      	strb	r3, [r7, #5]
	if(color)
 8000a4e:	797b      	ldrb	r3, [r7, #5]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d01a      	beq.n	8000a8a <OLED_Set_Pixel+0x4e>
	{
		OLED_buffer[(y/PAGE_SIZE)*WIDTH+x]|= (1<<(y%PAGE_SIZE))&0xff;
 8000a54:	79bb      	ldrb	r3, [r7, #6]
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	b2d8      	uxtb	r0, r3
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	01da      	lsls	r2, r3, #7
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	4413      	add	r3, r2
 8000a62:	4a1b      	ldr	r2, [pc, #108]	; (8000ad0 <OLED_Set_Pixel+0x94>)
 8000a64:	5cd3      	ldrb	r3, [r2, r3]
 8000a66:	b25a      	sxtb	r2, r3
 8000a68:	79bb      	ldrb	r3, [r7, #6]
 8000a6a:	f003 0307 	and.w	r3, r3, #7
 8000a6e:	2101      	movs	r1, #1
 8000a70:	fa01 f303 	lsl.w	r3, r1, r3
 8000a74:	b25b      	sxtb	r3, r3
 8000a76:	4313      	orrs	r3, r2
 8000a78:	b259      	sxtb	r1, r3
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	01da      	lsls	r2, r3, #7
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	4413      	add	r3, r2
 8000a82:	b2c9      	uxtb	r1, r1
 8000a84:	4a12      	ldr	r2, [pc, #72]	; (8000ad0 <OLED_Set_Pixel+0x94>)
 8000a86:	54d1      	strb	r1, [r2, r3]
	}
	else
	{
		OLED_buffer[(y/PAGE_SIZE)*WIDTH+x]&= ~((1<<(y%PAGE_SIZE))&0xff);
	}
}
 8000a88:	e01b      	b.n	8000ac2 <OLED_Set_Pixel+0x86>
		OLED_buffer[(y/PAGE_SIZE)*WIDTH+x]&= ~((1<<(y%PAGE_SIZE))&0xff);
 8000a8a:	79bb      	ldrb	r3, [r7, #6]
 8000a8c:	08db      	lsrs	r3, r3, #3
 8000a8e:	b2d8      	uxtb	r0, r3
 8000a90:	4603      	mov	r3, r0
 8000a92:	01da      	lsls	r2, r3, #7
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	4413      	add	r3, r2
 8000a98:	4a0d      	ldr	r2, [pc, #52]	; (8000ad0 <OLED_Set_Pixel+0x94>)
 8000a9a:	5cd3      	ldrb	r3, [r2, r3]
 8000a9c:	b25a      	sxtb	r2, r3
 8000a9e:	79bb      	ldrb	r3, [r7, #6]
 8000aa0:	f003 0307 	and.w	r3, r3, #7
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aaa:	b25b      	sxtb	r3, r3
 8000aac:	43db      	mvns	r3, r3
 8000aae:	b25b      	sxtb	r3, r3
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	b259      	sxtb	r1, r3
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	01da      	lsls	r2, r3, #7
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	4413      	add	r3, r2
 8000abc:	b2c9      	uxtb	r1, r1
 8000abe:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <OLED_Set_Pixel+0x94>)
 8000ac0:	54d1      	strb	r1, [r2, r3]
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000020 	.word	0x20000020

08000ad4 <OLED_Display>:
 * @function   :Display in OLED screen
 * @parameters :None
 * @retvalue   :None
********************************************************************/
void OLED_Display(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
	u8 i,n;
	for(i=0;i<PAGE_SIZE;i++)
 8000ada:	2300      	movs	r3, #0
 8000adc:	71fb      	strb	r3, [r7, #7]
 8000ade:	e024      	b.n	8000b2a <OLED_Display+0x56>
	{
		OLED_WR_Byte (YLevel+i,OLED_CMD);    //ÉèÖÃÒ³µØÖ·£¨0~7£©
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	33b0      	adds	r3, #176	; 0xb0
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff ff90 	bl	8000a0c <OLED_WR_Byte>
		OLED_WR_Byte (XLevelL,OLED_CMD);      //ÉèÖÃÏÔÊ¾Î»ÖÃ¡ªÁÐµÍµØÖ·
 8000aec:	2100      	movs	r1, #0
 8000aee:	2000      	movs	r0, #0
 8000af0:	f7ff ff8c 	bl	8000a0c <OLED_WR_Byte>
		OLED_WR_Byte (XLevelH,OLED_CMD);      //ÉèÖÃÏÔÊ¾Î»ÖÃ¡ªÁÐ¸ßµØÖ·
 8000af4:	2100      	movs	r1, #0
 8000af6:	2010      	movs	r0, #16
 8000af8:	f7ff ff88 	bl	8000a0c <OLED_WR_Byte>
		for(n=0;n<WIDTH;n++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	71bb      	strb	r3, [r7, #6]
 8000b00:	e00c      	b.n	8000b1c <OLED_Display+0x48>
		{
			OLED_WR_Byte(OLED_buffer[i*WIDTH+n],OLED_DATA);
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	01da      	lsls	r2, r3, #7
 8000b06:	79bb      	ldrb	r3, [r7, #6]
 8000b08:	4413      	add	r3, r2
 8000b0a:	4a0c      	ldr	r2, [pc, #48]	; (8000b3c <OLED_Display+0x68>)
 8000b0c:	5cd3      	ldrb	r3, [r2, r3]
 8000b0e:	2101      	movs	r1, #1
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff ff7b 	bl	8000a0c <OLED_WR_Byte>
		for(n=0;n<WIDTH;n++)
 8000b16:	79bb      	ldrb	r3, [r7, #6]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	71bb      	strb	r3, [r7, #6]
 8000b1c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	daee      	bge.n	8000b02 <OLED_Display+0x2e>
	for(i=0;i<PAGE_SIZE;i++)
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	3301      	adds	r3, #1
 8000b28:	71fb      	strb	r3, [r7, #7]
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2b07      	cmp	r3, #7
 8000b2e:	d9d7      	bls.n	8000ae0 <OLED_Display+0xc>
		}
	}   //¸üÐÂÏÔÊ¾
}
 8000b30:	bf00      	nop
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000020 	.word	0x20000020

08000b40 <OLED_Clear>:
 * @parameters :dat:0-Display full black
                    1-Display full white
 * @retvalue   :None
********************************************************************/
void OLED_Clear(unsigned dat)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	if(dat)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d006      	beq.n	8000b5c <OLED_Clear+0x1c>
	{
		memset(OLED_buffer,0xff,sizeof(OLED_buffer));
 8000b4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b52:	21ff      	movs	r1, #255	; 0xff
 8000b54:	4807      	ldr	r0, [pc, #28]	; (8000b74 <OLED_Clear+0x34>)
 8000b56:	f000 fc9d 	bl	8001494 <memset>
 8000b5a:	e005      	b.n	8000b68 <OLED_Clear+0x28>
	}
	else
	{
		memset(OLED_buffer,0,sizeof(OLED_buffer));
 8000b5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b60:	2100      	movs	r1, #0
 8000b62:	4804      	ldr	r0, [pc, #16]	; (8000b74 <OLED_Clear+0x34>)
 8000b64:	f000 fc96 	bl	8001494 <memset>
	}
	OLED_Display();
 8000b68:	f7ff ffb4 	bl	8000ad4 <OLED_Display>
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000020 	.word	0x20000020

08000b78 <OLED_Init>:
 * @function   :initialise OLED SH1106 control IC
 * @parameters :None
 * @retvalue   :None
********************************************************************/
void OLED_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
 	   //¸´Î»OLED
	delay_ms(200);
 8000b7c:	20c8      	movs	r0, #200	; 0xc8
 8000b7e:	f000 f867 	bl	8000c50 <delay_ms>
/**************³õÊ¼»¯SSD1306*****************/
	OLED_WR_Byte(0xAE,OLED_CMD); /*display off*/
 8000b82:	2100      	movs	r1, #0
 8000b84:	20ae      	movs	r0, #174	; 0xae
 8000b86:	f7ff ff41 	bl	8000a0c <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD); /*set lower column address*/
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	f7ff ff3d 	bl	8000a0c <OLED_WR_Byte>
	OLED_WR_Byte(0x10,OLED_CMD); /*set higher column address*/
 8000b92:	2100      	movs	r1, #0
 8000b94:	2010      	movs	r0, #16
 8000b96:	f7ff ff39 	bl	8000a0c <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD); /*set display start line*/
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2040      	movs	r0, #64	; 0x40
 8000b9e:	f7ff ff35 	bl	8000a0c <OLED_WR_Byte>
	OLED_WR_Byte(0xB0,OLED_CMD); /*set page address*/
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	20b0      	movs	r0, #176	; 0xb0
 8000ba6:	f7ff ff31 	bl	8000a0c <OLED_WR_Byte>
	OLED_WR_Byte(0x81,OLED_CMD); /*contract control*/
 8000baa:	2100      	movs	r1, #0
 8000bac:	2081      	movs	r0, #129	; 0x81
 8000bae:	f7ff ff2d 	bl	8000a0c <OLED_WR_Byte>
	OLED_WR_Byte(0xFF,OLED_CMD); /*128*/
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	20ff      	movs	r0, #255	; 0xff
 8000bb6:	f7ff ff29 	bl	8000a0c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); /*set segment remap*/
 8000bba:	2100      	movs	r1, #0
 8000bbc:	20a1      	movs	r0, #161	; 0xa1
 8000bbe:	f7ff ff25 	bl	8000a0c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); /*normal / reverse*/
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	20a6      	movs	r0, #166	; 0xa6
 8000bc6:	f7ff ff21 	bl	8000a0c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); /*multiplex ratio*/
 8000bca:	2100      	movs	r1, #0
 8000bcc:	20a8      	movs	r0, #168	; 0xa8
 8000bce:	f7ff ff1d 	bl	8000a0c <OLED_WR_Byte>
	OLED_WR_Byte(0x3F,OLED_CMD); /*duty = 1/64*/
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	203f      	movs	r0, #63	; 0x3f
 8000bd6:	f7ff ff19 	bl	8000a0c <OLED_WR_Byte>
	OLED_WR_Byte(0xC8,OLED_CMD); /*Com scan direction*/
 8000bda:	2100      	movs	r1, #0
 8000bdc:	20c8      	movs	r0, #200	; 0xc8
 8000bde:	f7ff ff15 	bl	8000a0c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD); /*set display offset*/
 8000be2:	2100      	movs	r1, #0
 8000be4:	20d3      	movs	r0, #211	; 0xd3
 8000be6:	f7ff ff11 	bl	8000a0c <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);
 8000bea:	2100      	movs	r1, #0
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff ff0d 	bl	8000a0c <OLED_WR_Byte>
	OLED_WR_Byte(0xD5,OLED_CMD); /*set osc division*/
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	20d5      	movs	r0, #213	; 0xd5
 8000bf6:	f7ff ff09 	bl	8000a0c <OLED_WR_Byte>
	OLED_WR_Byte(0x80,OLED_CMD);
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	2080      	movs	r0, #128	; 0x80
 8000bfe:	f7ff ff05 	bl	8000a0c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); /*set pre-charge period*/
 8000c02:	2100      	movs	r1, #0
 8000c04:	20d9      	movs	r0, #217	; 0xd9
 8000c06:	f7ff ff01 	bl	8000a0c <OLED_WR_Byte>
	OLED_WR_Byte(0XF1,OLED_CMD);
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	20f1      	movs	r0, #241	; 0xf1
 8000c0e:	f7ff fefd 	bl	8000a0c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); /*set COM pins*/
 8000c12:	2100      	movs	r1, #0
 8000c14:	20da      	movs	r0, #218	; 0xda
 8000c16:	f7ff fef9 	bl	8000a0c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD);
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	2012      	movs	r0, #18
 8000c1e:	f7ff fef5 	bl	8000a0c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); /*set vcomh*/
 8000c22:	2100      	movs	r1, #0
 8000c24:	20db      	movs	r0, #219	; 0xdb
 8000c26:	f7ff fef1 	bl	8000a0c <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2030      	movs	r0, #48	; 0x30
 8000c2e:	f7ff feed 	bl	8000a0c <OLED_WR_Byte>
	OLED_WR_Byte(0x8D,OLED_CMD); /*set charge pump disable*/
 8000c32:	2100      	movs	r1, #0
 8000c34:	208d      	movs	r0, #141	; 0x8d
 8000c36:	f7ff fee9 	bl	8000a0c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD);
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	2014      	movs	r0, #20
 8000c3e:	f7ff fee5 	bl	8000a0c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); /*display ON*/
 8000c42:	2100      	movs	r1, #0
 8000c44:	20af      	movs	r0, #175	; 0xaf
 8000c46:	f7ff fee1 	bl	8000a0c <OLED_WR_Byte>
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <delay_ms>:

#include "delay.h"
/**
 * @brief delay
 */
void delay_ms(uint32_t delay){
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	SysTick->CTRL = 0;
 8000c58:	4b14      	ldr	r3, [pc, #80]	; (8000cac <delay_ms+0x5c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 84000 - 1;
 8000c5e:	4b13      	ldr	r3, [pc, #76]	; (8000cac <delay_ms+0x5c>)
 8000c60:	4a13      	ldr	r2, [pc, #76]	; (8000cb0 <delay_ms+0x60>)
 8000c62:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <delay_ms+0x5c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1U<<2 | 1U;
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <delay_ms+0x5c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a0f      	ldr	r2, [pc, #60]	; (8000cac <delay_ms+0x5c>)
 8000c70:	f043 0305 	orr.w	r3, r3, #5
 8000c74:	6013      	str	r3, [r2, #0]
	for(uint32_t i = 0;i<delay;i++){
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	e009      	b.n	8000c90 <delay_ms+0x40>
		while(!(SysTick->CTRL & 1u<<16));
 8000c7c:	bf00      	nop
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <delay_ms+0x5c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d0f9      	beq.n	8000c7e <delay_ms+0x2e>
	for(uint32_t i = 0;i<delay;i++){
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fa      	ldr	r2, [r7, #12]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d3f1      	bcc.n	8000c7c <delay_ms+0x2c>
	}
	SysTick->CTRL = 0;
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <delay_ms+0x5c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
	return;
 8000c9e:	bf00      	nop
}
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000e010 	.word	0xe000e010
 8000cb0:	0001481f 	.word	0x0001481f

08000cb4 <GUI_DrawBMP>:
								mode:0-white background and black character
								     1-black background and white character								
 * @retvalue   :None
******************************************************************************/ 
void GUI_DrawBMP(u8 x,u8 y,u8 width, u8 height, u8 BMP[], u8 mode)
{ 	
 8000cb4:	b590      	push	{r4, r7, lr}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4604      	mov	r4, r0
 8000cbc:	4608      	mov	r0, r1
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4623      	mov	r3, r4
 8000cc4:	71fb      	strb	r3, [r7, #7]
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71bb      	strb	r3, [r7, #6]
 8000cca:	460b      	mov	r3, r1
 8000ccc:	717b      	strb	r3, [r7, #5]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	713b      	strb	r3, [r7, #4]
 u8 i,j,k;
 u8 tmp;
 for(i=0;i<height;i++)
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	73fb      	strb	r3, [r7, #15]
 8000cd6:	e06b      	b.n	8000db0 <GUI_DrawBMP+0xfc>
 {
		for(j=0;j<(width+7)/8;j++)
 8000cd8:	2300      	movs	r3, #0
 8000cda:	73bb      	strb	r3, [r7, #14]
 8000cdc:	e05c      	b.n	8000d98 <GUI_DrawBMP+0xe4>
		{
		    if(mode)
 8000cde:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d010      	beq.n	8000d08 <GUI_DrawBMP+0x54>
				{
					tmp = BMP[i*((width+7)/8)+j];
 8000ce6:	7bfa      	ldrb	r2, [r7, #15]
 8000ce8:	797b      	ldrb	r3, [r7, #5]
 8000cea:	3307      	adds	r3, #7
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	da00      	bge.n	8000cf2 <GUI_DrawBMP+0x3e>
 8000cf0:	3307      	adds	r3, #7
 8000cf2:	10db      	asrs	r3, r3, #3
 8000cf4:	fb03 f202 	mul.w	r2, r3, r2
 8000cf8:	7bbb      	ldrb	r3, [r7, #14]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	6a3b      	ldr	r3, [r7, #32]
 8000d00:	4413      	add	r3, r2
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	733b      	strb	r3, [r7, #12]
 8000d06:	e010      	b.n	8000d2a <GUI_DrawBMP+0x76>
				}
				else
				{
					tmp = ~BMP[i*((width+7)/8)+j];
 8000d08:	7bfa      	ldrb	r2, [r7, #15]
 8000d0a:	797b      	ldrb	r3, [r7, #5]
 8000d0c:	3307      	adds	r3, #7
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	da00      	bge.n	8000d14 <GUI_DrawBMP+0x60>
 8000d12:	3307      	adds	r3, #7
 8000d14:	10db      	asrs	r3, r3, #3
 8000d16:	fb03 f202 	mul.w	r2, r3, r2
 8000d1a:	7bbb      	ldrb	r3, [r7, #14]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	461a      	mov	r2, r3
 8000d20:	6a3b      	ldr	r3, [r7, #32]
 8000d22:	4413      	add	r3, r2
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	43db      	mvns	r3, r3
 8000d28:	733b      	strb	r3, [r7, #12]
				}
				for(k=0;k<8;k++)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	737b      	strb	r3, [r7, #13]
 8000d2e:	e02d      	b.n	8000d8c <GUI_DrawBMP+0xd8>
				{
					if(tmp&(0x80>>k))
 8000d30:	7b3a      	ldrb	r2, [r7, #12]
 8000d32:	7b7b      	ldrb	r3, [r7, #13]
 8000d34:	2180      	movs	r1, #128	; 0x80
 8000d36:	fa41 f303 	asr.w	r3, r1, r3
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d011      	beq.n	8000d64 <GUI_DrawBMP+0xb0>
					{
						OLED_Set_Pixel(x+j*8+k, y+i,1);
 8000d40:	7bbb      	ldrb	r3, [r7, #14]
 8000d42:	00db      	lsls	r3, r3, #3
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	4413      	add	r3, r2
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	7b7b      	ldrb	r3, [r7, #13]
 8000d4e:	4413      	add	r3, r2
 8000d50:	b2d8      	uxtb	r0, r3
 8000d52:	79ba      	ldrb	r2, [r7, #6]
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	4413      	add	r3, r2
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f7ff fe6d 	bl	8000a3c <OLED_Set_Pixel>
 8000d62:	e010      	b.n	8000d86 <GUI_DrawBMP+0xd2>
					}
					else
					{
						OLED_Set_Pixel(x+j*8+k, y+i,0);
 8000d64:	7bbb      	ldrb	r3, [r7, #14]
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	7b7b      	ldrb	r3, [r7, #13]
 8000d72:	4413      	add	r3, r2
 8000d74:	b2d8      	uxtb	r0, r3
 8000d76:	79ba      	ldrb	r2, [r7, #6]
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2200      	movs	r2, #0
 8000d80:	4619      	mov	r1, r3
 8000d82:	f7ff fe5b 	bl	8000a3c <OLED_Set_Pixel>
				for(k=0;k<8;k++)
 8000d86:	7b7b      	ldrb	r3, [r7, #13]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	737b      	strb	r3, [r7, #13]
 8000d8c:	7b7b      	ldrb	r3, [r7, #13]
 8000d8e:	2b07      	cmp	r3, #7
 8000d90:	d9ce      	bls.n	8000d30 <GUI_DrawBMP+0x7c>
		for(j=0;j<(width+7)/8;j++)
 8000d92:	7bbb      	ldrb	r3, [r7, #14]
 8000d94:	3301      	adds	r3, #1
 8000d96:	73bb      	strb	r3, [r7, #14]
 8000d98:	7bba      	ldrb	r2, [r7, #14]
 8000d9a:	797b      	ldrb	r3, [r7, #5]
 8000d9c:	3307      	adds	r3, #7
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	da00      	bge.n	8000da4 <GUI_DrawBMP+0xf0>
 8000da2:	3307      	adds	r3, #7
 8000da4:	10db      	asrs	r3, r3, #3
 8000da6:	429a      	cmp	r2, r3
 8000da8:	db99      	blt.n	8000cde <GUI_DrawBMP+0x2a>
 for(i=0;i<height;i++)
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	3301      	adds	r3, #1
 8000dae:	73fb      	strb	r3, [r7, #15]
 8000db0:	7bfa      	ldrb	r2, [r7, #15]
 8000db2:	793b      	ldrb	r3, [r7, #4]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d38f      	bcc.n	8000cd8 <GUI_DrawBMP+0x24>
					}
				}
		}
 } 
 OLED_Display();
 8000db8:	f7ff fe8c 	bl	8000ad4 <OLED_Display>
}
 8000dbc:	bf00      	nop
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd90      	pop	{r4, r7, pc}

08000dc4 <main>:
	*/
void MPU6050_Init_Config(void);


int main(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af02      	add	r7, sp, #8
	/*flash configuration*/
	flash_cofig();
 8000dca:	f000 f8c5 	bl	8000f58 <flash_cofig>
	/*external clock configuration*/
	HSE_Config();
 8000dce:	f000 f8a3 	bl	8000f18 <HSE_Config>
	/*pll configution*/
	PLL_Config();
 8000dd2:	f000 f83b 	bl	8000e4c <PLL_Config>
/******************************************************************/
	/*I2C INIT*/
	I2C1_GPIOInit();
 8000dd6:	f000 f8e7 	bl	8000fa8 <I2C1_GPIOInit>
	I2C_Init(I2C1, I2C_SCL_SPEED_FM4K);
 8000dda:	4919      	ldr	r1, [pc, #100]	; (8000e40 <main+0x7c>)
 8000ddc:	4819      	ldr	r0, [pc, #100]	; (8000e44 <main+0x80>)
 8000dde:	f000 f93f 	bl	8001060 <I2C_Init>
    /* Loop forever */
//	MPU6050_Init_Config();
//	I2C_MasterSendData(I2C1, MPU_ADDR, some_data, 10);
	OLED_Init();
 8000de2:	f7ff fec9 	bl	8000b78 <OLED_Init>
	OLED_Clear(1);
 8000de6:	2001      	movs	r0, #1
 8000de8:	f7ff feaa 	bl	8000b40 <OLED_Clear>

	for(;;){

//		MPU6050_Get_Accel_Scale(&myAccelScaled);
//		MPU6050_Get_Gyro_Scale(&myGyroScaled);
		GUI_DrawBMP(0, 0, pajaro.width, pajaro.height, (uint8_t*)pajaro.data, 1);
 8000dec:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <main+0x84>)
 8000dee:	889b      	ldrh	r3, [r3, #4]
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <main+0x84>)
 8000df4:	88db      	ldrh	r3, [r3, #6]
 8000df6:	b2d9      	uxtb	r1, r3
 8000df8:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <main+0x84>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	9001      	str	r0, [sp, #4]
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	460b      	mov	r3, r1
 8000e04:	2100      	movs	r1, #0
 8000e06:	2000      	movs	r0, #0
 8000e08:	f7ff ff54 	bl	8000cb4 <GUI_DrawBMP>
		delay_ms(2000);
 8000e0c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e10:	f7ff ff1e 	bl	8000c50 <delay_ms>
		GUI_DrawBMP(0, 0, pajaro.width, pajaro.height, (uint8_t*)pajaro.data, 0);
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <main+0x84>)
 8000e16:	889b      	ldrh	r3, [r3, #4]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <main+0x84>)
 8000e1c:	88db      	ldrh	r3, [r3, #6]
 8000e1e:	b2d9      	uxtb	r1, r3
 8000e20:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <main+0x84>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2000      	movs	r0, #0
 8000e26:	9001      	str	r0, [sp, #4]
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f7ff ff40 	bl	8000cb4 <GUI_DrawBMP>
		delay_ms(2000);
 8000e34:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e38:	f7ff ff0a 	bl	8000c50 <delay_ms>
		GUI_DrawBMP(0, 0, pajaro.width, pajaro.height, (uint8_t*)pajaro.data, 1);
 8000e3c:	e7d6      	b.n	8000dec <main+0x28>
 8000e3e:	bf00      	nop
 8000e40:	00061a80 	.word	0x00061a80
 8000e44:	40005400 	.word	0x40005400
 8000e48:	080018bc 	.word	0x080018bc

08000e4c <PLL_Config>:

/**
 * @brief PLL config
 * configura el PLL  a 84MHz
 */
void PLL_Config(void){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	HSE_Config();
 8000e50:	f000 f862 	bl	8000f18 <HSE_Config>
	/*configure PLL before enabling it*/
	//1. PLL clock source
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;	//select HSE CLOCK SOURCE
 8000e54:	4b2e      	ldr	r3, [pc, #184]	; (8000f10 <PLL_Config+0xc4>)
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	4a2d      	ldr	r2, [pc, #180]	; (8000f10 <PLL_Config+0xc4>)
 8000e5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e5e:	6053      	str	r3, [r2, #4]
	/**
	 * 	f(VCO clock) = f(PLL clock input) × (PLLN / PLLM)	(192 and 432 MHz)
	 * 	f(PLL general clock output) = f(VCO clock) / PLLP  	<= 84MHz
	 */
	//M
	RCC->PLLCFGR &=~ RCC_PLLCFGR_PLLM;
 8000e60:	4b2b      	ldr	r3, [pc, #172]	; (8000f10 <PLL_Config+0xc4>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	4a2a      	ldr	r2, [pc, #168]	; (8000f10 <PLL_Config+0xc4>)
 8000e66:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e6a:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 4U;							//VCO input frequency (1MHz to 2MHz)
 8000e6c:	4b28      	ldr	r3, [pc, #160]	; (8000f10 <PLL_Config+0xc4>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	4a27      	ldr	r2, [pc, #156]	; (8000f10 <PLL_Config+0xc4>)
 8000e72:	f043 0304 	orr.w	r3, r3, #4
 8000e76:	6053      	str	r3, [r2, #4]
	//N
	RCC->PLLCFGR &=~ RCC_PLLCFGR_PLLN;
 8000e78:	4b25      	ldr	r3, [pc, #148]	; (8000f10 <PLL_Config+0xc4>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	4a24      	ldr	r2, [pc, #144]	; (8000f10 <PLL_Config+0xc4>)
 8000e7e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000e82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e86:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 168U<<6;					//168MHZ
 8000e88:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <PLL_Config+0xc4>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	4a20      	ldr	r2, [pc, #128]	; (8000f10 <PLL_Config+0xc4>)
 8000e8e:	f443 5328 	orr.w	r3, r3, #10752	; 0x2a00
 8000e92:	6053      	str	r3, [r2, #4]
	//P
	RCC->PLLCFGR &=~ RCC_PLLCFGR_PLLP;
 8000e94:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <PLL_Config+0xc4>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	4a1d      	ldr	r2, [pc, #116]	; (8000f10 <PLL_Config+0xc4>)
 8000e9a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000e9e:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 1U<<16;						//84MHz
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <PLL_Config+0xc4>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	4a1a      	ldr	r2, [pc, #104]	; (8000f10 <PLL_Config+0xc4>)
 8000ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eaa:	6053      	str	r3, [r2, #4]
	//3. enable PLL
	RCC->CR |= RCC_CR_PLLON;
 8000eac:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <PLL_Config+0xc4>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a17      	ldr	r2, [pc, #92]	; (8000f10 <PLL_Config+0xc4>)
 8000eb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000eb6:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));			//Waint until
 8000eb8:	bf00      	nop
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <PLL_Config+0xc4>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d0f9      	beq.n	8000eba <PLL_Config+0x6e>
	/*configure AHBx, APBx precaler*/
	RCC->CFGR = 0x00000000;						//reset
 8000ec6:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <PLL_Config+0xc4>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
	RCC->CFGR |= 0b100<<10;						//100: AHB clock divided by 2
 8000ecc:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <PLL_Config+0xc4>)
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	4a0f      	ldr	r2, [pc, #60]	; (8000f10 <PLL_Config+0xc4>)
 8000ed2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ed6:	6093      	str	r3, [r2, #8]
	/*configure flash latency*/
	FLASH->ACR &=~ FLASH_ACR_LATENCY;
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <PLL_Config+0xc8>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0d      	ldr	r2, [pc, #52]	; (8000f14 <PLL_Config+0xc8>)
 8000ede:	f023 0307 	bic.w	r3, r3, #7
 8000ee2:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <PLL_Config+0xc8>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <PLL_Config+0xc8>)
 8000eea:	f043 0302 	orr.w	r3, r3, #2
 8000eee:	6013      	str	r3, [r2, #0]
	/*select system clock source*/
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <PLL_Config+0xc4>)
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	4a06      	ldr	r2, [pc, #24]	; (8000f10 <PLL_Config+0xc4>)
 8000ef6:	f043 0302 	orr.w	r3, r3, #2
 8000efa:	6093      	str	r3, [r2, #8]
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));		//wait PLL ready as system clock
 8000efc:	bf00      	nop
 8000efe:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <PLL_Config+0xc4>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f003 0308 	and.w	r3, r3, #8
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d0f9      	beq.n	8000efe <PLL_Config+0xb2>
	return;
 8000f0a:	bf00      	nop
}
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40023c00 	.word	0x40023c00

08000f18 <HSE_Config>:

void HSE_Config(void){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
 8000f1c:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <HSE_Config+0x3c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0c      	ldr	r2, [pc, #48]	; (8000f54 <HSE_Config+0x3c>)
 8000f22:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8000f26:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY));
 8000f28:	bf00      	nop
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <HSE_Config+0x3c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0f9      	beq.n	8000f2a <HSE_Config+0x12>
	RCC->CFGR = RCC_CFGR_SW_HSE;
 8000f36:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <HSE_Config+0x3c>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	609a      	str	r2, [r3, #8]
	while(!(RCC->CFGR & RCC_CFGR_SWS_HSE));
 8000f3c:	bf00      	nop
 8000f3e:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <HSE_Config+0x3c>)
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f003 0304 	and.w	r3, r3, #4
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0f9      	beq.n	8000f3e <HSE_Config+0x26>
	SystemCoreClockUpdate();
 8000f4a:	f000 f9d5 	bl	80012f8 <SystemCoreClockUpdate>

}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800

08000f58 <flash_cofig>:
void flash_cofig(void){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	FLASH->ACR |= 1<<9;							//1: Instruction cache is enabled
 8000f5c:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <flash_cofig+0x48>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a0f      	ldr	r2, [pc, #60]	; (8000fa0 <flash_cofig+0x48>)
 8000f62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f66:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= 1<<10;						//1: Data cache is enabled
 8000f68:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <flash_cofig+0x48>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0c      	ldr	r2, [pc, #48]	; (8000fa0 <flash_cofig+0x48>)
 8000f6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f72:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= 1<<8;							//1: Prefetch is enabled
 8000f74:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <flash_cofig+0x48>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a09      	ldr	r2, [pc, #36]	; (8000fa0 <flash_cofig+0x48>)
 8000f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f7e:	6013      	str	r3, [r2, #0]
	//SE HABILITAN ALGUNOS CLOCK
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <flash_cofig+0x4c>)
 8000f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f84:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <flash_cofig+0x4c>)
 8000f86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f8a:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <flash_cofig+0x4c>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <flash_cofig+0x4c>)
 8000f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f96:	6413      	str	r3, [r2, #64]	; 0x40
	SystemCoreClockUpdate();
 8000f98:	f000 f9ae 	bl	80012f8 <SystemCoreClockUpdate>
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40023c00 	.word	0x40023c00
 8000fa4:	40023800 	.word	0x40023800

08000fa8 <I2C1_GPIOInit>:


/**
 * @configuracion de pines del I2C
 */
void I2C1_GPIOInit(void){
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
	/*enable clock*/
	RCC->AHB1ENR |= GPIOX_CLOCK(I2C1_SCL) | GPIOX_CLOCK(I2C1_SDA);
 8000fac:	4b29      	ldr	r3, [pc, #164]	; (8001054 <I2C1_GPIOInit+0xac>)
 8000fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb0:	4a28      	ldr	r2, [pc, #160]	; (8001054 <I2C1_GPIOInit+0xac>)
 8000fb2:	f043 0302 	orr.w	r3, r3, #2
 8000fb6:	6313      	str	r3, [r2, #48]	; 0x30
	//PB9->I2C1_SDA, PB8->I2C1_SCL
	GPIOX_MODER(MODE_ALTER,I2C1_SCL);
 8000fb8:	4b27      	ldr	r3, [pc, #156]	; (8001058 <I2C1_GPIOInit+0xb0>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000fc0:	4a25      	ldr	r2, [pc, #148]	; (8001058 <I2C1_GPIOInit+0xb0>)
 8000fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc6:	6013      	str	r3, [r2, #0]
	GPIOX_MODER(MODE_ALTER,I2C1_SDA);
 8000fc8:	4b23      	ldr	r3, [pc, #140]	; (8001058 <I2C1_GPIOInit+0xb0>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000fd0:	4a21      	ldr	r2, [pc, #132]	; (8001058 <I2C1_GPIOInit+0xb0>)
 8000fd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fd6:	6013      	str	r3, [r2, #0]
	GPIOX_OTYPER(MODE_OT_OD,I2C1_SCL);
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <I2C1_GPIOInit+0xb0>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	4a1e      	ldr	r2, [pc, #120]	; (8001058 <I2C1_GPIOInit+0xb0>)
 8000fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe2:	6053      	str	r3, [r2, #4]
	GPIOX_OTYPER(MODE_OT_OD,I2C1_SDA);
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <I2C1_GPIOInit+0xb0>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	4a1b      	ldr	r2, [pc, #108]	; (8001058 <I2C1_GPIOInit+0xb0>)
 8000fea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fee:	6053      	str	r3, [r2, #4]
	GPIOX_PUPDR(MODE_PU_UP,I2C1_SCL);
 8000ff0:	4b19      	ldr	r3, [pc, #100]	; (8001058 <I2C1_GPIOInit+0xb0>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000ff8:	4a17      	ldr	r2, [pc, #92]	; (8001058 <I2C1_GPIOInit+0xb0>)
 8000ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ffe:	60d3      	str	r3, [r2, #12]
	GPIOX_PUPDR(MODE_PU_UP,I2C1_SDA);
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <I2C1_GPIOInit+0xb0>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001008:	4a13      	ldr	r2, [pc, #76]	; (8001058 <I2C1_GPIOInit+0xb0>)
 800100a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800100e:	60d3      	str	r3, [r2, #12]
	GPIOX_OSPEEDR(MODE_SPD_VHIGH,I2C1_SCL);
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <I2C1_GPIOInit+0xb0>)
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	4a10      	ldr	r2, [pc, #64]	; (8001058 <I2C1_GPIOInit+0xb0>)
 8001016:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800101a:	6093      	str	r3, [r2, #8]
	GPIOX_OSPEEDR(MODE_SPD_VHIGH,I2C1_SDA);
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <I2C1_GPIOInit+0xb0>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <I2C1_GPIOInit+0xb0>)
 8001022:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8001026:	6093      	str	r3, [r2, #8]
	GPIOX_AFR(4,I2C1_SCL);
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <I2C1_GPIOInit+0xb0>)
 800102a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102c:	f023 030f 	bic.w	r3, r3, #15
 8001030:	4a09      	ldr	r2, [pc, #36]	; (8001058 <I2C1_GPIOInit+0xb0>)
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOX_AFR(4,I2C1_SDA);
 8001038:	4b07      	ldr	r3, [pc, #28]	; (8001058 <I2C1_GPIOInit+0xb0>)
 800103a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001040:	4a05      	ldr	r2, [pc, #20]	; (8001058 <I2C1_GPIOInit+0xb0>)
 8001042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001046:	6253      	str	r3, [r2, #36]	; 0x24
	return;
 8001048:	bf00      	nop
}
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800
 8001058:	40020400 	.word	0x40020400
 800105c:	00000000 	.word	0x00000000

08001060 <I2C_Init>:

/**
 * void I2C init
 */
void I2C_Init(I2C_TypeDef *I2Cx, uint32_t mode){
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]

	uint32_t tempreg = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
	uint16_t ccr_value = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	817b      	strh	r3, [r7, #10]


	if(I2Cx == I2C1)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a48      	ldr	r2, [pc, #288]	; (8001198 <I2C_Init+0x138>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d106      	bne.n	8001088 <I2C_Init+0x28>
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800107a:	4b48      	ldr	r3, [pc, #288]	; (800119c <I2C_Init+0x13c>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	4a47      	ldr	r2, [pc, #284]	; (800119c <I2C_Init+0x13c>)
 8001080:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001084:	6413      	str	r3, [r2, #64]	; 0x40
 8001086:	e010      	b.n	80010aa <I2C_Init+0x4a>
	else if(I2Cx == I2C2)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a45      	ldr	r2, [pc, #276]	; (80011a0 <I2C_Init+0x140>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d106      	bne.n	800109e <I2C_Init+0x3e>
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8001090:	4b42      	ldr	r3, [pc, #264]	; (800119c <I2C_Init+0x13c>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	4a41      	ldr	r2, [pc, #260]	; (800119c <I2C_Init+0x13c>)
 8001096:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800109a:	6413      	str	r3, [r2, #64]	; 0x40
 800109c:	e005      	b.n	80010aa <I2C_Init+0x4a>
	else
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 800109e:	4b3f      	ldr	r3, [pc, #252]	; (800119c <I2C_Init+0x13c>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	4a3e      	ldr	r2, [pc, #248]	; (800119c <I2C_Init+0x13c>)
 80010a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010a8:	6413      	str	r3, [r2, #64]	; 0x40

	/*Enter reset mode  */
	I2C1->CR1 |= (1U<<15);
 80010aa:	4b3b      	ldr	r3, [pc, #236]	; (8001198 <I2C_Init+0x138>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a3a      	ldr	r2, [pc, #232]	; (8001198 <I2C_Init+0x138>)
 80010b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010b4:	6013      	str	r3, [r2, #0]

	/*Come out of reset mode  */
	I2C1->CR1 &=~(1U<<15);
 80010b6:	4b38      	ldr	r3, [pc, #224]	; (8001198 <I2C_Init+0x138>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a37      	ldr	r2, [pc, #220]	; (8001198 <I2C_Init+0x138>)
 80010bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80010c0:	6013      	str	r3, [r2, #0]

	/*I2C param configuration*/
	//ack control bit
	I2Cx->CR1 = I2C_CR1_ACK;	//Confirmación devuelta después de recibir un byte (dirección o datos coincidentes)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010c8:	601a      	str	r2, [r3, #0]

	//configurar el campo FREQ de CR2
	tempreg = PCLK1 / 1000000U;
 80010ca:	232a      	movs	r3, #42	; 0x2a
 80010cc:	60fb      	str	r3, [r7, #12]
	I2Cx->CR2 = (tempreg & 0x3FU);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	605a      	str	r2, [r3, #4]

	//programar la propia dirección del dispositivo
	tempreg = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
	tempreg |= SLAVE_ADDR<<1;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f043 03d2 	orr.w	r3, r3, #210	; 0xd2
 80010e2:	60fb      	str	r3, [r7, #12]
	tempreg |= (1<<14);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ea:	60fb      	str	r3, [r7, #12]
	I2Cx->OAR1 = tempreg;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	609a      	str	r2, [r3, #8]

	//cálculos de CCR
	tempreg = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
	if(mode == I2C_SCL_SPEED_SM){  //standart mode
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	4a2a      	ldr	r2, [pc, #168]	; (80011a4 <I2C_Init+0x144>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d11a      	bne.n	8001134 <I2C_Init+0xd4>
		ccr_value = (PCLK1 / (2 * mode));
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff f9aa 	bl	800045c <__aeabi_ui2d>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	a120      	add	r1, pc, #128	; (adr r1, 8001190 <I2C_Init+0x130>)
 800110e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001112:	f7ff fb47 	bl	80007a4 <__aeabi_ddiv>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	f7ff fc29 	bl	8000974 <__aeabi_d2uiz>
 8001122:	4603      	mov	r3, r0
 8001124:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8001126:	897b      	ldrh	r3, [r7, #10]
 8001128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	4313      	orrs	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	e00f      	b.n	8001154 <I2C_Init+0xf4>
	}
	else{//fast mode
		tempreg |= I2C_CCR_FS;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800113a:	60fb      	str	r3, [r7, #12]
#if 1				//duty_2
	tempreg &=~ I2C_CCR_DUTY;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001142:	60fb      	str	r3, [r7, #12]
	ccr_value = (PCLK1 / ( 3 * I2C_SCL_SPEED_FM4K));
 8001144:	2323      	movs	r3, #35	; 0x23
 8001146:	817b      	strh	r3, [r7, #10]
#else 				//duty_16_9
	tempreg |= I2C_CCR_DUTY;
	ccr_value = (PCLK1 / (25 * I2C_SCL_SPEED_FM4K));
#endif
	tempreg |= (ccr_value & 0xFFF);
 8001148:	897b      	ldrh	r3, [r7, #10]
 800114a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	4313      	orrs	r3, r2
 8001152:	60fb      	str	r3, [r7, #12]
	}
	I2Cx->CCR = tempreg;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	61da      	str	r2, [r3, #28]
	//TRISE Configuration
	if(mode == I2C_SCL_SPEED_SM){
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	4a11      	ldr	r2, [pc, #68]	; (80011a4 <I2C_Init+0x144>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d102      	bne.n	8001168 <I2C_Init+0x108>
		tempreg = (PCLK1 / 1000000U) + 1;
 8001162:	232b      	movs	r3, #43	; 0x2b
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	e001      	b.n	800116c <I2C_Init+0x10c>
	}else{
		tempreg = ( (PCLK1 * 300) / 1000000000U ) + 1;
 8001168:	230d      	movs	r3, #13
 800116a:	60fb      	str	r3, [r7, #12]
	}
	I2Cx->TRISE = (tempreg & 0x3F);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	621a      	str	r2, [r3, #32]

	/*Habilitar el modulo i2c*/
	I2Cx->CR1 |= I2C_CR1_PE;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f043 0201 	orr.w	r2, r3, #1
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	601a      	str	r2, [r3, #0]

	return;
 8001182:	bf00      	nop
}
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	f3af 8000 	nop.w
 8001190:	00000000 	.word	0x00000000
 8001194:	418406f4 	.word	0x418406f4
 8001198:	40005400 	.word	0x40005400
 800119c:	40023800 	.word	0x40023800
 80011a0:	40005800 	.word	0x40005800
 80011a4:	000186a0 	.word	0x000186a0

080011a8 <I2C_MasterSendData>:

void I2C_MasterSendData(I2C_TypeDef *I2Cx, uint8_t SlaveAddr,uint8_t *pTxbuffer, uint32_t Len){
 80011a8:	b480      	push	{r7}
 80011aa:	b087      	sub	sp, #28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	460b      	mov	r3, r1
 80011b6:	72fb      	strb	r3, [r7, #11]

	volatile int tmp;

	/*verificar los datos*/
	if(Len <= 0 || pTxbuffer == ((void *)0))
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d059      	beq.n	8001272 <I2C_MasterSendData+0xca>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d056      	beq.n	8001272 <I2C_MasterSendData+0xca>
		return;
	/*esperar que la linea esté libre*/
	while((I2Cx->SR2 & I2C_SR2_BUSY));
 80011c4:	bf00      	nop
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f9      	bne.n	80011c6 <I2C_MasterSendData+0x1e>

	//1. generar la condición de start
	I2Cx->CR1 |= I2C_CR1_START;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	601a      	str	r2, [r3, #0]
	//2. esperar que la condición de inicio se haya generado
	while(!(I2Cx->SR1 & I2C_SR1_SB));
 80011de:	bf00      	nop
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d0f9      	beq.n	80011e0 <I2C_MasterSendData+0x38>

	//3. enviar la direccion del esclavo con r/w bit
	SlaveAddr = SlaveAddr <<1 ;
 80011ec:	7afb      	ldrb	r3, [r7, #11]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	72fb      	strb	r3, [r7, #11]
	SlaveAddr &=~(1U);						//write operation
 80011f2:	7afb      	ldrb	r3, [r7, #11]
 80011f4:	f023 0301 	bic.w	r3, r3, #1
 80011f8:	72fb      	strb	r3, [r7, #11]
	I2Cx->DR = SlaveAddr;
 80011fa:	7afa      	ldrb	r2, [r7, #11]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	611a      	str	r2, [r3, #16]
	//4. verificar que la fase de direccion se completó
	while(!(I2Cx->SR1 & I2C_SR1_ADDR));
 8001200:	bf00      	nop
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f9      	beq.n	8001202 <I2C_MasterSendData+0x5a>
	//5. limpiar el flag
	tmp = I2Cx->SR1;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	617b      	str	r3, [r7, #20]
	tmp = I2Cx->SR2;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	617b      	str	r3, [r7, #20]
	(void)tmp;
 800121a:	697b      	ldr	r3, [r7, #20]

	//6. enviar los datos
	while(Len > 0){
 800121c:	e011      	b.n	8001242 <I2C_MasterSendData+0x9a>

		while(!(I2Cx->SR1 & I2C_SR1_TXE));
 800121e:	bf00      	nop
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0f9      	beq.n	8001220 <I2C_MasterSendData+0x78>
		I2Cx->DR = *pTxbuffer;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3301      	adds	r3, #1
 800123a:	607b      	str	r3, [r7, #4]
		Len--;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	3b01      	subs	r3, #1
 8001240:	603b      	str	r3, [r7, #0]
	while(Len > 0){
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1ea      	bne.n	800121e <I2C_MasterSendData+0x76>
	}
	//7. esperar hasta que la transmision se complete
	while(!(I2Cx->SR1 & I2C_SR1_TXE));
 8001248:	bf00      	nop
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001252:	2b00      	cmp	r3, #0
 8001254:	d0f9      	beq.n	800124a <I2C_MasterSendData+0xa2>
	while(!(I2Cx->SR1 & I2C_SR1_BTF));
 8001256:	bf00      	nop
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	f003 0304 	and.w	r3, r3, #4
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0f9      	beq.n	8001258 <I2C_MasterSendData+0xb0>

	//8. generar la condición de stop
	I2Cx->CR1 |= I2C_CR1_STOP;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	601a      	str	r2, [r3, #0]

	return;
 8001270:	e000      	b.n	8001274 <I2C_MasterSendData+0xcc>
		return;
 8001272:	bf00      	nop
}
 8001274:	371c      	adds	r7, #28
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  while (1)
 8001282:	e7fe      	b.n	8001282 <NMI_Handler+0x4>

08001284 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0

  while (1)
 8001288:	e7fe      	b.n	8001288 <HardFault_Handler+0x4>

0800128a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0
  while (1)
 800128e:	e7fe      	b.n	800128e <MemManage_Handler+0x4>

08001290 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  while (1)
 8001294:	e7fe      	b.n	8001294 <BusFault_Handler+0x4>

08001296 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  while (1)
 800129a:	e7fe      	b.n	800129a <UsageFault_Handler+0x4>

0800129c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0

}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0

}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0

}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <SystemInit+0x20>)
 80012da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012de:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <SystemInit+0x20>)
 80012e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b087      	sub	sp, #28
 80012fc:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	2302      	movs	r3, #2
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	2302      	movs	r3, #2
 8001310:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001312:	4b34      	ldr	r3, [pc, #208]	; (80013e4 <SystemCoreClockUpdate+0xec>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 030c 	and.w	r3, r3, #12
 800131a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	2b08      	cmp	r3, #8
 8001320:	d011      	beq.n	8001346 <SystemCoreClockUpdate+0x4e>
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	2b08      	cmp	r3, #8
 8001326:	d844      	bhi.n	80013b2 <SystemCoreClockUpdate+0xba>
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <SystemCoreClockUpdate+0x3e>
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	2b04      	cmp	r3, #4
 8001332:	d004      	beq.n	800133e <SystemCoreClockUpdate+0x46>
 8001334:	e03d      	b.n	80013b2 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001336:	4b2c      	ldr	r3, [pc, #176]	; (80013e8 <SystemCoreClockUpdate+0xf0>)
 8001338:	4a2c      	ldr	r2, [pc, #176]	; (80013ec <SystemCoreClockUpdate+0xf4>)
 800133a:	601a      	str	r2, [r3, #0]
      break;
 800133c:	e03d      	b.n	80013ba <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800133e:	4b2a      	ldr	r3, [pc, #168]	; (80013e8 <SystemCoreClockUpdate+0xf0>)
 8001340:	4a2b      	ldr	r2, [pc, #172]	; (80013f0 <SystemCoreClockUpdate+0xf8>)
 8001342:	601a      	str	r2, [r3, #0]
      break;
 8001344:	e039      	b.n	80013ba <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001346:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <SystemCoreClockUpdate+0xec>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	0d9b      	lsrs	r3, r3, #22
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001352:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <SystemCoreClockUpdate+0xec>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800135a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00c      	beq.n	800137c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001362:	4a23      	ldr	r2, [pc, #140]	; (80013f0 <SystemCoreClockUpdate+0xf8>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	fbb2 f3f3 	udiv	r3, r2, r3
 800136a:	4a1e      	ldr	r2, [pc, #120]	; (80013e4 <SystemCoreClockUpdate+0xec>)
 800136c:	6852      	ldr	r2, [r2, #4]
 800136e:	0992      	lsrs	r2, r2, #6
 8001370:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001374:	fb02 f303 	mul.w	r3, r2, r3
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	e00b      	b.n	8001394 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800137c:	4a1b      	ldr	r2, [pc, #108]	; (80013ec <SystemCoreClockUpdate+0xf4>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	fbb2 f3f3 	udiv	r3, r2, r3
 8001384:	4a17      	ldr	r2, [pc, #92]	; (80013e4 <SystemCoreClockUpdate+0xec>)
 8001386:	6852      	ldr	r2, [r2, #4]
 8001388:	0992      	lsrs	r2, r2, #6
 800138a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800138e:	fb02 f303 	mul.w	r3, r2, r3
 8001392:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001394:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <SystemCoreClockUpdate+0xec>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	0c1b      	lsrs	r3, r3, #16
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	3301      	adds	r3, #1
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80013a4:	697a      	ldr	r2, [r7, #20]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ac:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <SystemCoreClockUpdate+0xf0>)
 80013ae:	6013      	str	r3, [r2, #0]
      break;
 80013b0:	e003      	b.n	80013ba <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80013b2:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <SystemCoreClockUpdate+0xf0>)
 80013b4:	4a0d      	ldr	r2, [pc, #52]	; (80013ec <SystemCoreClockUpdate+0xf4>)
 80013b6:	601a      	str	r2, [r3, #0]
      break;
 80013b8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <SystemCoreClockUpdate+0xec>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	091b      	lsrs	r3, r3, #4
 80013c0:	f003 030f 	and.w	r3, r3, #15
 80013c4:	4a0b      	ldr	r2, [pc, #44]	; (80013f4 <SystemCoreClockUpdate+0xfc>)
 80013c6:	5cd3      	ldrb	r3, [r2, r3]
 80013c8:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80013ca:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <SystemCoreClockUpdate+0xf0>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	fa22 f303 	lsr.w	r3, r2, r3
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <SystemCoreClockUpdate+0xf0>)
 80013d6:	6013      	str	r3, [r2, #0]
}
 80013d8:	bf00      	nop
 80013da:	371c      	adds	r7, #28
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	40023800 	.word	0x40023800
 80013e8:	20000000 	.word	0x20000000
 80013ec:	00f42400 	.word	0x00f42400
 80013f0:	007a1200 	.word	0x007a1200
 80013f4:	080018c8 	.word	0x080018c8

080013f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013f8:	480d      	ldr	r0, [pc, #52]	; (8001430 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013fc:	f7ff ff6a 	bl	80012d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001400:	480c      	ldr	r0, [pc, #48]	; (8001434 <LoopForever+0x6>)
  ldr r1, =_edata
 8001402:	490d      	ldr	r1, [pc, #52]	; (8001438 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001404:	4a0d      	ldr	r2, [pc, #52]	; (800143c <LoopForever+0xe>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001408:	e002      	b.n	8001410 <LoopCopyDataInit>

0800140a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800140a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800140c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800140e:	3304      	adds	r3, #4

08001410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001414:	d3f9      	bcc.n	800140a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001416:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001418:	4c0a      	ldr	r4, [pc, #40]	; (8001444 <LoopForever+0x16>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800141c:	e001      	b.n	8001422 <LoopFillZerobss>

0800141e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800141e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001420:	3204      	adds	r2, #4

08001422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001424:	d3fb      	bcc.n	800141e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001426:	f000 f811 	bl	800144c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800142a:	f7ff fccb 	bl	8000dc4 <main>

0800142e <LoopForever>:

LoopForever:
    b LoopForever
 800142e:	e7fe      	b.n	800142e <LoopForever>
  ldr   r0, =_estack
 8001430:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001438:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800143c:	080018e0 	.word	0x080018e0
  ldr r2, =_sbss
 8001440:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001444:	20000420 	.word	0x20000420

08001448 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001448:	e7fe      	b.n	8001448 <ADC_IRQHandler>
	...

0800144c <__libc_init_array>:
 800144c:	b570      	push	{r4, r5, r6, lr}
 800144e:	4d0d      	ldr	r5, [pc, #52]	; (8001484 <__libc_init_array+0x38>)
 8001450:	4c0d      	ldr	r4, [pc, #52]	; (8001488 <__libc_init_array+0x3c>)
 8001452:	1b64      	subs	r4, r4, r5
 8001454:	10a4      	asrs	r4, r4, #2
 8001456:	2600      	movs	r6, #0
 8001458:	42a6      	cmp	r6, r4
 800145a:	d109      	bne.n	8001470 <__libc_init_array+0x24>
 800145c:	4d0b      	ldr	r5, [pc, #44]	; (800148c <__libc_init_array+0x40>)
 800145e:	4c0c      	ldr	r4, [pc, #48]	; (8001490 <__libc_init_array+0x44>)
 8001460:	f000 f820 	bl	80014a4 <_init>
 8001464:	1b64      	subs	r4, r4, r5
 8001466:	10a4      	asrs	r4, r4, #2
 8001468:	2600      	movs	r6, #0
 800146a:	42a6      	cmp	r6, r4
 800146c:	d105      	bne.n	800147a <__libc_init_array+0x2e>
 800146e:	bd70      	pop	{r4, r5, r6, pc}
 8001470:	f855 3b04 	ldr.w	r3, [r5], #4
 8001474:	4798      	blx	r3
 8001476:	3601      	adds	r6, #1
 8001478:	e7ee      	b.n	8001458 <__libc_init_array+0xc>
 800147a:	f855 3b04 	ldr.w	r3, [r5], #4
 800147e:	4798      	blx	r3
 8001480:	3601      	adds	r6, #1
 8001482:	e7f2      	b.n	800146a <__libc_init_array+0x1e>
 8001484:	080018d8 	.word	0x080018d8
 8001488:	080018d8 	.word	0x080018d8
 800148c:	080018d8 	.word	0x080018d8
 8001490:	080018dc 	.word	0x080018dc

08001494 <memset>:
 8001494:	4402      	add	r2, r0
 8001496:	4603      	mov	r3, r0
 8001498:	4293      	cmp	r3, r2
 800149a:	d100      	bne.n	800149e <memset+0xa>
 800149c:	4770      	bx	lr
 800149e:	f803 1b01 	strb.w	r1, [r3], #1
 80014a2:	e7f9      	b.n	8001498 <memset+0x4>

080014a4 <_init>:
 80014a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014a6:	bf00      	nop
 80014a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014aa:	bc08      	pop	{r3}
 80014ac:	469e      	mov	lr, r3
 80014ae:	4770      	bx	lr

080014b0 <_fini>:
 80014b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014b2:	bf00      	nop
 80014b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014b6:	bc08      	pop	{r3}
 80014b8:	469e      	mov	lr, r3
 80014ba:	4770      	bx	lr
